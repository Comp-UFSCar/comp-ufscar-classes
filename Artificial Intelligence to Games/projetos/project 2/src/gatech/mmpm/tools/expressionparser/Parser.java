/* Copyright 2010 Santiago Ontanon and Ashwin Ram */


//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 15 14:54:37 CET 2010
//----------------------------------------------------

package gatech.mmpm.tools.expressionparser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 15 14:54:37 CET 2010
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\004\003\000\002\004\007" +
    "\000\002\005\003\000\002\005\005\000\002\006\003\000" +
    "\002\006\005\000\002\007\003\000\002\007\005\000\002" +
    "\010\003\000\002\010\005\000\002\012\003\000\002\012" +
    "\005\000\002\011\003\000\002\011\005\000\002\013\004" +
    "\000\002\013\003\000\002\014\004\000\002\014\003\000" +
    "\002\015\003\000\002\015\003\000\002\016\003\000\002" +
    "\016\005\000\002\016\003\000\002\020\005\000\002\020" +
    "\006\000\002\021\003\000\002\021\005\000\002\021\004" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\020\005\030\020\010\021\006\022\025\023" +
    "\013\024\005\025\027\001\002\000\030\002\uffe7\004\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\001\002\000\030\002\uffdf\004\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\012\uffdf\013\uffdf\014\uffdf\015" +
    "\uffdf\016\uffdf\017\uffdf\001\002\000\026\002\uffea\005\034" +
    "\007\uffea\011\072\012\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\017\uffea\001\002\000\012\002\ufffe\004\ufffe\006\ufffe" +
    "\010\ufffe\001\002\000\022\005\030\012\047\020\010\021" +
    "\031\022\025\023\013\024\005\025\027\001\002\000\030" +
    "\002\ufff1\004\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1\013" +
    "\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\001\002\000\030" +
    "\002\uffec\004\uffec\006\uffec\007\uffec\010\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\016\uffec\017\uffec\001\002\000\030" +
    "\002\uffde\004\uffde\006\uffde\007\uffde\010\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\017\uffde\001\002\000\004" +
    "\002\uffff\001\002\000\026\002\ufff5\004\ufff5\006\ufff5\007" +
    "\ufff5\010\ufff5\012\066\014\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\001\002\000\024\002\ufff7\004\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\017\064\001\002\000\022" +
    "\002\ufff9\004\ufff9\006\ufff9\007\ufff9\010\ufff9\014\ufff9\015" +
    "\ufff9\016\062\001\002\000\020\002\ufffb\004\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\014\ufffb\015\060\001\002\000\030\002" +
    "\uffeb\004\uffeb\006\uffeb\007\uffeb\010\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\001\002\000\004\002" +
    "\070\001\002\000\016\002\ufffd\004\ufffd\006\ufffd\007\053" +
    "\010\ufffd\014\052\001\002\000\030\002\uffe9\004\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9" +
    "\016\uffe9\017\uffe9\001\002\000\030\002\uffe1\004\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\001\002\000\030\002\ufff3\004\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\012\ufff3\013\045\014\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\001\002\000\030\002\uffe0\004\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\017\uffe0\001\002\000\020\005\030\020\010\021" +
    "\031\022\025\023\013\024\005\025\027\001\002\000\032" +
    "\002\uffea\004\uffea\005\034\006\uffea\007\uffea\010\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\017\uffea\001\002" +
    "\000\004\006\033\001\002\000\030\002\uffe8\004\uffe8\006" +
    "\uffe8\007\uffe8\010\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\016\uffe8\017\uffe8\001\002\000\024\004\035\005\030\006" +
    "\037\020\010\021\031\022\025\023\013\024\005\025\027" +
    "\001\002\000\022\004\035\005\030\020\010\021\031\022" +
    "\025\023\013\024\005\025\027\001\002\000\006\004\042" +
    "\006\uffe4\001\002\000\030\002\uffe6\004\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\017\uffe6\001\002\000\004\006\041\001\002\000\030\002" +
    "\uffe5\004\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\001\002\000\022\004" +
    "\035\005\030\020\010\021\031\022\025\023\013\024\005" +
    "\025\027\001\002\000\004\006\uffe3\001\002\000\004\006" +
    "\uffe2\001\002\000\022\005\030\012\047\020\010\021\031" +
    "\022\025\023\013\024\005\025\027\001\002\000\030\002" +
    "\ufff0\004\ufff0\006\ufff0\007\ufff0\010\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\017\ufff0\001\002\000\022\005" +
    "\030\012\047\020\010\021\031\022\025\023\013\024\005" +
    "\025\027\001\002\000\030\002\uffee\004\uffee\006\uffee\007" +
    "\uffee\010\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\001\002\000\030\002\uffef\004\uffef\006\uffef\007" +
    "\uffef\010\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\017\uffef\001\002\000\020\005\030\020\010\021\031\022" +
    "\025\023\013\024\005\025\027\001\002\000\020\005\030" +
    "\020\010\021\031\022\025\023\013\024\005\025\027\001" +
    "\002\000\004\010\055\001\002\000\020\005\030\020\010" +
    "\021\031\022\025\023\013\024\005\025\027\001\002\000" +
    "\012\002\ufffc\004\ufffc\006\ufffc\010\ufffc\001\002\000\020" +
    "\002\ufffa\004\ufffa\006\ufffa\007\ufffa\010\ufffa\014\ufffa\015" +
    "\060\001\002\000\020\005\030\020\010\021\031\022\025" +
    "\023\013\024\005\025\027\001\002\000\022\002\ufff8\004" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\014\ufff8\015\ufff8\016\062" +
    "\001\002\000\020\005\030\020\010\021\031\022\025\023" +
    "\013\024\005\025\027\001\002\000\024\002\ufff6\004\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\014\ufff6\015\ufff6\016\ufff6\017" +
    "\064\001\002\000\020\005\030\020\010\021\031\022\025" +
    "\023\013\024\005\025\027\001\002\000\026\002\ufff4\004" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\012\066\014\ufff4\015\ufff4" +
    "\016\ufff4\017\ufff4\001\002\000\020\005\030\020\010\021" +
    "\031\022\025\023\013\024\005\025\027\001\002\000\030" +
    "\002\ufff2\004\ufff2\006\ufff2\007\ufff2\010\ufff2\012\ufff2\013" +
    "\045\014\ufff2\015\ufff2\016\ufff2\017\ufff2\001\002\000\004" +
    "\002\000\001\002\000\030\002\uffed\004\uffed\006\uffed\007" +
    "\uffed\010\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed" +
    "\017\uffed\001\002\000\020\005\030\020\010\021\031\022" +
    "\025\023\013\024\005\025\027\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\036\002\021\003\013\004\006\005\022\006" +
    "\017\007\016\010\015\011\025\012\014\014\010\015\011" +
    "\016\020\017\023\020\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\013\070\014\047\015\011\016\020\017\023\020\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\003\031" +
    "\004\006\005\022\006\017\007\016\010\015\011\025\012" +
    "\014\014\010\015\011\016\020\017\023\020\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\035\004\006\005\022\006\017\007\016\010\015" +
    "\011\025\012\014\014\010\015\011\016\020\017\023\020" +
    "\003\021\037\001\001\000\036\003\035\004\006\005\022" +
    "\006\017\007\016\010\015\011\025\012\014\014\010\015" +
    "\011\016\020\017\023\020\003\021\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\035\004\006\005\022\006\017\007\016" +
    "\010\015\011\025\012\014\014\010\015\011\016\020\017" +
    "\023\020\003\021\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\013\045\014\047\015\011\016\020\017" +
    "\023\020\003\001\001\000\002\001\001\000\016\013\050" +
    "\014\047\015\011\016\020\017\023\020\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\006\056\007\016" +
    "\010\015\011\025\012\014\014\010\015\011\016\020\017" +
    "\023\020\003\001\001\000\034\003\053\004\006\005\022" +
    "\006\017\007\016\010\015\011\025\012\014\014\010\015" +
    "\011\016\020\017\023\020\003\001\001\000\002\001\001" +
    "\000\034\003\055\004\006\005\022\006\017\007\016\010" +
    "\015\011\025\012\014\014\010\015\011\016\020\017\023" +
    "\020\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\007\060\010\015\011\025\012\014\014\010\015\011" +
    "\016\020\017\023\020\003\001\001\000\002\001\001\000" +
    "\022\010\062\011\025\012\014\014\010\015\011\016\020" +
    "\017\023\020\003\001\001\000\002\001\001\000\020\011" +
    "\025\012\064\014\010\015\011\016\020\017\023\020\003" +
    "\001\001\000\002\001\001\000\016\011\066\014\010\015" +
    "\011\016\020\017\023\020\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\003\072\004" +
    "\006\005\022\006\017\007\016\010\015\011\025\012\014" +
    "\014\010\015\011\016\020\017\023\020\003\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public ExpressionNode buildArithmeticBinaryExpression(ExpressionNode lhs, OperatorToken op, ExpressionNode rhs) {
		try {
			return ExpressionBuilder.buildArithmeticBinaryExpression(lhs, op, rhs);
		}
		catch (ExpressionBuilderException ex) {
			report_error(ex.getMessage(), null);
			return null;
		}
	}

	public ExpressionNode buildRelationalExpression(ExpressionNode lhs, OperatorToken op, ExpressionNode rhs) {
		try {
			return ExpressionBuilder.buildRelationalExpression(lhs, op, rhs);
		}
		catch (ExpressionBuilderException ex) {
			report_error(ex.getMessage(), null);
			return null;
		}
	}

	public ExpressionNode buildEqualityExpression(ExpressionNode lhs, OperatorToken op, ExpressionNode rhs) {
		try {
			return ExpressionBuilder.buildEqualityExpression(lhs, op, rhs);
		}
		catch (ExpressionBuilderException ex) {
			report_error(ex.getMessage(), null);
			return null;
		}
	}
	
	public ExpressionNode buildLogicalExpression(ExpressionNode lhs, OperatorToken op, ExpressionNode rhs) {
		try {
			return ExpressionBuilder.buildLogicalExpression(lhs, op, rhs);
		}
		catch (ExpressionBuilderException ex) {
			report_error(ex.getMessage(), null);
			return null;
		}
	}
	
	public ExpressionNode buildMethodInvocationExpression(String name, java.util.List<ExpressionNode> params) {
		try {
			return ExpressionBuilder.buildMethodInvocationExpression(name, params);
		}
		catch (ExpressionBuilderException ex) {
			report_error(ex.getMessage(), null);
			return null;
		}
	}

	public ExpressionNode buildIdentificatorExpression(String name) {
		try {
			return ExpressionBuilder.buildIdentificatorExpression(name);
		}
		catch (ExpressionBuilderException ex) {
			report_error(ex.getMessage(), null);
			return null;
		}
	}


	public ExpressionNode buildConditionalExpression(ExpressionNode condition, ExpressionNode yesCase, ExpressionNode noCase) {
		try {
			return ExpressionBuilder.buildConditionalExpression(condition, yesCase, noCase);
		}
		catch (ExpressionBuilderException ex) {
			report_error(ex.getMessage(), null);
			return null;
		}
	}

	public ExpressionNode buildAssignment(String id, ExpressionNode expr) {
		try {
			return ExpressionBuilder.buildAssignment(id, expr);
		}
		catch (ExpressionBuilderException ex) {
			report_error(ex.getMessage(), null);
			return null;
		}
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // literal ::= STRING_LITERAL 
            {
              ExpressionNode RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new StringLiteralNode(str);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // literal ::= BOOLEAN_LITERAL 
            {
              ExpressionNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new BooleanLiteralNode(b);    
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // literal ::= FLOAT_LITERAL 
            {
              ExpressionNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new FloatLiteralNode(f);    
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // literal ::= INTEGER_LITERAL 
            {
              ExpressionNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
			RESULT = new IntegerLiteralNode(n);    
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // argument_list ::= COMMA argument_list 
            {
              java.util.List<ExpressionNode> RESULT =null;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.util.List<ExpressionNode> tail = (java.util.List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    		tail.add(0,null);
    		RESULT = tail;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // argument_list ::= expression COMMA argument_list 
            {
              java.util.List<ExpressionNode> RESULT =null;
		int headleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode head = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.util.List<ExpressionNode> tail = (java.util.List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    		tail.add(0,head);
    		RESULT = tail;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // argument_list ::= expression 
            {
              java.util.List<ExpressionNode> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    		java.util.LinkedList<ExpressionNode> aux;
    		aux = new java.util.LinkedList<ExpressionNode>();
    		aux.add(expr);
    		RESULT = aux;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // method_invocation ::= IDENTIFIER LPAR argument_list RPAR 
            {
              ExpressionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		java.util.List<ExpressionNode> args = (java.util.List<ExpressionNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
          RESULT = parser.buildMethodInvocationExpression(id, args);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_invocation",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // method_invocation ::= IDENTIFIER LPAR RPAR 
            {
              ExpressionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
          RESULT = parser.buildMethodInvocationExpression(id, new java.util.LinkedList<ExpressionNode>());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_invocation",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // primary ::= method_invocation 
            {
              ExpressionNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = expr;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // primary ::= LPAR expression RPAR 
            {
              ExpressionNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  
          RESULT = expr;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // primary ::= literal 
            {
              ExpressionNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = expr;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("primary",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // postfix_expression ::= IDENTIFIER 
            {
              ExpressionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = parser.buildIdentificatorExpression(id);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // postfix_expression ::= primary 
            {
              ExpressionNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = expr;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("postfix_expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // unary_expression_not_plus_minus ::= postfix_expression 
            {
              ExpressionNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = expr;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression_not_plus_minus",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // unary_expression_not_plus_minus ::= NOT_OP unary_expression 
            {
              ExpressionNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OperatorToken op = (OperatorToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression_not_plus_minus",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // unary_expression ::= unary_expression_not_plus_minus 
            {
              ExpressionNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = expr;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // unary_expression ::= ADD_OP unary_expression 
            {
              ExpressionNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OperatorToken op = (OperatorToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary_expression",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // multiplicative_expression ::= multiplicative_expression MULT_OP unary_expression 
            {
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OperatorToken op = (OperatorToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = parser.buildArithmeticBinaryExpression(left, op, right);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // multiplicative_expression ::= unary_expression_not_plus_minus 
            {
              ExpressionNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = expr;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // additive_expression ::= additive_expression ADD_OP multiplicative_expression 
            {
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OperatorToken op = (OperatorToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = parser.buildArithmeticBinaryExpression(left, op, right);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // additive_expression ::= multiplicative_expression 
            {
              ExpressionNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = expr;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("additive_expression",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // relational_expression ::= relational_expression RELATIONAL_OP additive_expression 
            {
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OperatorToken op = (OperatorToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = parser.buildRelationalExpression(left, op, right);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // relational_expression ::= additive_expression 
            {
              ExpressionNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = expr;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("relational_expression",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // equality_expression ::= equality_expression EQ_OP relational_expression 
            {
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OperatorToken op = (OperatorToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = parser.buildEqualityExpression(left, op, right);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // equality_expression ::= relational_expression 
            {
              ExpressionNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = expr;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equality_expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // logical_and_expression ::= logical_and_expression AND_OP equality_expression 
            {
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OperatorToken op = (OperatorToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = parser.buildLogicalExpression(left, op, right);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // logical_and_expression ::= equality_expression 
            {
              ExpressionNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = expr;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_and_expression",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // logical_or_expression ::= logical_or_expression OR_OP logical_and_expression 
            {
              ExpressionNode RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode left = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		OperatorToken op = (OperatorToken)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode right = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = parser.buildLogicalExpression(left, op, right);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // logical_or_expression ::= logical_and_expression 
            {
              ExpressionNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = expr;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("logical_or_expression",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // conditional_expression ::= logical_or_expression QUESTION expression COLON expression 
            {
              ExpressionNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ExpressionNode cond = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int yesCaseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int yesCaseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpressionNode yesCase = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int noCaseleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int noCaseright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode noCase = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = parser.buildConditionalExpression(cond, yesCase, noCase);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // conditional_expression ::= logical_or_expression 
            {
              ExpressionNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = expr;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expression ::= conditional_expression 
            {
              ExpressionNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = expr;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // assignment ::= expression 
            {
              ExpressionNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = expr;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= assignment EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ExpressionNode start_val = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // assignment ::= IDENTIFIER EQUAL expression 
            {
              ExpressionNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpressionNode expr = (ExpressionNode)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
          RESULT = parser.buildAssignment(id, expr);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

